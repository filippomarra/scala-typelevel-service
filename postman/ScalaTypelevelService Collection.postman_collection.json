{
	"info": {
		"_postman_id": "ea46951f-1a34-4d87-974b-c760b46aa637",
		"name": "ScalaTypelevelService Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27886281"
	},
	"item": [
		{
			"name": "Users APIs",
			"item": [
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response body is \"UserController is ready!\"', function () {",
									"    pm.response.to.have.body('\"UserController is ready!\"');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}health",
							"host": [
								"{{base_url}}health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"})",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Response body is an array\", function () {",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"User object has id property\", function () {",
									"    pm.expect(jsonData[0]).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"User object has name property\", function () {",
									"    pm.expect(jsonData[0]).to.have.property(\"name\");",
									"});",
									"",
									"pm.test(\"User object has surname property\", function () {",
									"    pm.expect(jsonData[0]).to.have.property(\"surname\");",
									"});",
									"",
									"pm.test(\"User object has email property\", function () {",
									"    pm.expect(jsonData[0]).to.have.property(\"email\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}users",
							"host": [
								"{{base_url}}users"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"})",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Response body is an object\", function () {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"});",
									"",
									"pm.test(\"User object has id property\", function () {",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"User object has name property\", function () {",
									"    pm.expect(jsonData).to.have.property(\"name\");",
									"});",
									"",
									"pm.test(\"User object has surname property\", function () {",
									"    pm.expect(jsonData).to.have.property(\"surname\");",
									"});",
									"",
									"pm.test(\"User object has email property\", function () {",
									"    pm.expect(jsonData).to.have.property(\"email\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}users/1",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		}
	]
}